/* tslint:disable */ /* eslint-disable */ /**
 * Energy Australia Coding Test API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DUMMY_BASE_URL: function() {
        return DUMMY_BASE_URL;
    },
    assertParamExists: function() {
        return assertParamExists;
    },
    setApiKeyToObject: function() {
        return setApiKeyToObject;
    },
    setBasicAuthToObject: function() {
        return setBasicAuthToObject;
    },
    setBearerAuthToObject: function() {
        return setBearerAuthToObject;
    },
    setOAuthToObject: function() {
        return setOAuthToObject;
    },
    setSearchParams: function() {
        return setSearchParams;
    },
    serializeDataIfNeeded: function() {
        return serializeDataIfNeeded;
    },
    toPathString: function() {
        return toPathString;
    },
    createRequestFunction: function() {
        return createRequestFunction;
    }
});
var _base = require("./base");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpreadProps(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var __generator = (void 0) && (void 0).__generator || function(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var DUMMY_BASE_URL = "https://example.com";
var assertParamExists = function assertParamExists(functionName, paramName, paramValue) {
    if (paramValue === null || paramValue === undefined) {
        throw new _base.RequiredError(paramName, "Required parameter ".concat(paramName, " was null or undefined when calling ").concat(functionName, "."));
    }
};
var setApiKeyToObject = function() {
    var _ref = _asyncToGenerator(function(object, keyParamName, configuration) {
        var localVarApiKeyValue, _tmp;
        return __generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!(configuration && configuration.apiKey)) return [
                        3,
                        5
                    ];
                    if (!(typeof configuration.apiKey === "function")) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        configuration.apiKey(keyParamName)
                    ];
                case 1:
                    _tmp = _state.sent();
                    return [
                        3,
                        4
                    ];
                case 2:
                    return [
                        4,
                        configuration.apiKey
                    ];
                case 3:
                    _tmp = _state.sent();
                    _state.label = 4;
                case 4:
                    localVarApiKeyValue = _tmp;
                    object[keyParamName] = localVarApiKeyValue;
                    _state.label = 5;
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function setApiKeyToObject(object, keyParamName, configuration) {
        return _ref.apply(this, arguments);
    };
}();
var setBasicAuthToObject = function setBasicAuthToObject(object, configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = {
            username: configuration.username,
            password: configuration.password
        };
    }
};
var setBearerAuthToObject = function() {
    var _ref = _asyncToGenerator(function(object, configuration) {
        var accessToken, _tmp;
        return __generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!(configuration && configuration.accessToken)) return [
                        3,
                        5
                    ];
                    if (!(typeof configuration.accessToken === "function")) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        configuration.accessToken()
                    ];
                case 1:
                    _tmp = _state.sent();
                    return [
                        3,
                        4
                    ];
                case 2:
                    return [
                        4,
                        configuration.accessToken
                    ];
                case 3:
                    _tmp = _state.sent();
                    _state.label = 4;
                case 4:
                    accessToken = _tmp;
                    object["Authorization"] = "Bearer " + accessToken;
                    _state.label = 5;
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function setBearerAuthToObject(object, configuration) {
        return _ref.apply(this, arguments);
    };
}();
var setOAuthToObject = function() {
    var _ref = _asyncToGenerator(function(object, name, scopes, configuration) {
        var localVarAccessTokenValue, _tmp;
        return __generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!(configuration && configuration.accessToken)) return [
                        3,
                        5
                    ];
                    if (!(typeof configuration.accessToken === "function")) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        configuration.accessToken(name, scopes)
                    ];
                case 1:
                    _tmp = _state.sent();
                    return [
                        3,
                        4
                    ];
                case 2:
                    return [
                        4,
                        configuration.accessToken
                    ];
                case 3:
                    _tmp = _state.sent();
                    _state.label = 4;
                case 4:
                    localVarAccessTokenValue = _tmp;
                    object["Authorization"] = "Bearer " + localVarAccessTokenValue;
                    _state.label = 5;
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return function setOAuthToObject(object, name, scopes, configuration) {
        return _ref.apply(this, arguments);
    };
}();
function setFlattenedQueryParams(urlSearchParams, parameter) {
    var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            parameter.forEach(function(item) {
                return setFlattenedQueryParams(urlSearchParams, item, key);
            });
        } else {
            Object.keys(parameter).forEach(function(currentKey) {
                return setFlattenedQueryParams(urlSearchParams, parameter[currentKey], "".concat(key).concat(key !== "" ? "." : "").concat(currentKey));
            });
        }
    } else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } else {
            urlSearchParams.set(key, parameter);
        }
    }
}
var setSearchParams = function setSearchParams(url) {
    for(var _len = arguments.length, objects = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        objects[_key - 1] = arguments[_key];
    }
    var searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
};
var serializeDataIfNeeded = function serializeDataIfNeeded(value, requestOptions, configuration) {
    var nonString = typeof value !== "string";
    var needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
    return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || "";
};
var toPathString = function toPathString(url) {
    return url.pathname + url.search + url.hash;
};
var createRequestFunction = function createRequestFunction(axiosArgs, globalAxios, BASE_PATH, configuration) {
    return function() {
        var axios = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : globalAxios, basePath = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : BASE_PATH;
        var axiosRequestArgs = _objectSpreadProps(_objectSpread({}, axiosArgs.options), {
            url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + axiosArgs.url
        });
        return axios.request(axiosRequestArgs);
    };
};
